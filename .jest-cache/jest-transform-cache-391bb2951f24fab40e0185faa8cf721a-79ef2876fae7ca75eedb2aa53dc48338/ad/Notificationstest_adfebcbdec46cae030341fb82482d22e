3c3e1bb9e2d4a15091e2dda088f0bdb8
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../components/SettingsLayout', () => {
    return function MockSettingsLayout({ children, title, description }) {
        return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h1", { children: title }), (0, jsx_runtime_1.jsx)("p", { children: description }), children] }));
    };
});
const react_1 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const Notifications_1 = __importDefault(require("./Notifications"));
describe('Notifications', () => {
    const renderNotifications = () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Notifications_1.default, {}) }));
    };
    it('renders notification preferences header', () => {
        renderNotifications();
        expect(react_1.screen.getByText('Notification Preferences')).toBeInTheDocument();
        expect(react_1.screen.getByText('Manage your notification settings')).toBeInTheDocument();
    });
    it('renders all notification settings', () => {
        renderNotifications();
        // Check for all notification titles
        expect(react_1.screen.getByText('Email Notifications')).toBeInTheDocument();
        expect(react_1.screen.getByText('SMS Notifications')).toBeInTheDocument();
        expect(react_1.screen.getByText('Marketing Notifications')).toBeInTheDocument();
        expect(react_1.screen.getByText('Reservations Notifications')).toBeInTheDocument();
        // Check for all notification descriptions
        expect(react_1.screen.getByText('Receive notifications about email updates')).toBeInTheDocument();
        expect(react_1.screen.getByText('Receive notifications about sms updates')).toBeInTheDocument();
        expect(react_1.screen.getByText('Receive notifications about marketing updates')).toBeInTheDocument();
        expect(react_1.screen.getByText('Receive notifications about reservations updates')).toBeInTheDocument();
    });
    it('renders toggle buttons with correct initial states', () => {
        renderNotifications();
        const toggleButtons = react_1.screen.getAllByRole('button');
        expect(toggleButtons).toHaveLength(4);
        // Check initial states based on the component's initial state
        expect(toggleButtons[0]).toHaveClass('bg-[#333e48]'); // Email - enabled
        expect(toggleButtons[1]).toHaveClass('bg-gray-200'); // SMS - disabled
        expect(toggleButtons[2]).toHaveClass('bg-[#333e48]'); // Marketing - enabled
        expect(toggleButtons[3]).toHaveClass('bg-[#333e48]'); // Reservations - enabled
    });
    it('toggles notification settings when clicked', () => {
        renderNotifications();
        const toggleButtons = react_1.screen.getAllByRole('button');
        // Toggle email notifications (initially enabled)
        react_1.fireEvent.click(toggleButtons[0]);
        expect(toggleButtons[0]).toHaveClass('bg-gray-200');
        // Toggle SMS notifications (initially disabled)
        react_1.fireEvent.click(toggleButtons[1]);
        expect(toggleButtons[1]).toHaveClass('bg-[#333e48]');
        // Toggle marketing notifications (initially enabled)
        react_1.fireEvent.click(toggleButtons[2]);
        expect(toggleButtons[2]).toHaveClass('bg-gray-200');
        // Toggle reservations notifications (initially enabled)
        react_1.fireEvent.click(toggleButtons[3]);
        expect(toggleButtons[3]).toHaveClass('bg-gray-200');
    });
    it('updates toggle button appearance when clicked', () => {
        renderNotifications();
        const toggleButtons = react_1.screen.getAllByRole('button');
        const firstToggle = toggleButtons[0];
        // Check initial state
        expect(firstToggle.firstElementChild).toHaveClass('translate-x-6'); // Enabled position
        // Toggle off
        react_1.fireEvent.click(firstToggle);
        expect(firstToggle.firstElementChild).toHaveClass('translate-x-1'); // Disabled position
        // Toggle on again
        react_1.fireEvent.click(firstToggle);
        expect(firstToggle.firstElementChild).toHaveClass('translate-x-6'); // Back to enabled position
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,