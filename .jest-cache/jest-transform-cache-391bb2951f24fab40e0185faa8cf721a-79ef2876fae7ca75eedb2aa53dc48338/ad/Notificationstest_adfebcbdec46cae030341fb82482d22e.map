{"file":"/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Notifications.test.tsx","mappings":"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","names":[],"sources":["/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Notifications.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { BrowserRouter } from 'react-router-dom'\nimport Notifications from './Notifications'\n\njest.mock('../components/SettingsLayout', () => {\n  return function MockSettingsLayout({ children, title, description }: any) {\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{description}</p>\n        {children}\n      </div>\n    )\n  }\n})\n\ndescribe('Notifications', () => {\n  const renderNotifications = () => {\n    render(\n      <BrowserRouter>\n        <Notifications />\n      </BrowserRouter>\n    )\n  }\n\n  it('renders notification preferences header', () => {\n    renderNotifications()\n    expect(screen.getByText('Notification Preferences')).toBeInTheDocument()\n    expect(screen.getByText('Manage your notification settings')).toBeInTheDocument()\n  })\n\n  it('renders all notification settings', () => {\n    renderNotifications()\n    \n    // Check for all notification titles\n    expect(screen.getByText('Email Notifications')).toBeInTheDocument()\n    expect(screen.getByText('SMS Notifications')).toBeInTheDocument()\n    expect(screen.getByText('Marketing Notifications')).toBeInTheDocument()\n    expect(screen.getByText('Reservations Notifications')).toBeInTheDocument()\n\n    // Check for all notification descriptions\n    expect(screen.getByText('Receive notifications about email updates')).toBeInTheDocument()\n    expect(screen.getByText('Receive notifications about sms updates')).toBeInTheDocument()\n    expect(screen.getByText('Receive notifications about marketing updates')).toBeInTheDocument()\n    expect(screen.getByText('Receive notifications about reservations updates')).toBeInTheDocument()\n  })\n\n  it('renders toggle buttons with correct initial states', () => {\n    renderNotifications()\n    \n    const toggleButtons = screen.getAllByRole('button')\n    expect(toggleButtons).toHaveLength(4)\n\n    // Check initial states based on the component's initial state\n    expect(toggleButtons[0]).toHaveClass('bg-[#333e48]') // Email - enabled\n    expect(toggleButtons[1]).toHaveClass('bg-gray-200') // SMS - disabled\n    expect(toggleButtons[2]).toHaveClass('bg-[#333e48]') // Marketing - enabled\n    expect(toggleButtons[3]).toHaveClass('bg-[#333e48]') // Reservations - enabled\n  })\n\n  it('toggles notification settings when clicked', () => {\n    renderNotifications()\n    \n    const toggleButtons = screen.getAllByRole('button')\n\n    // Toggle email notifications (initially enabled)\n    fireEvent.click(toggleButtons[0])\n    expect(toggleButtons[0]).toHaveClass('bg-gray-200')\n\n    // Toggle SMS notifications (initially disabled)\n    fireEvent.click(toggleButtons[1])\n    expect(toggleButtons[1]).toHaveClass('bg-[#333e48]')\n\n    // Toggle marketing notifications (initially enabled)\n    fireEvent.click(toggleButtons[2])\n    expect(toggleButtons[2]).toHaveClass('bg-gray-200')\n\n    // Toggle reservations notifications (initially enabled)\n    fireEvent.click(toggleButtons[3])\n    expect(toggleButtons[3]).toHaveClass('bg-gray-200')\n  })\n\n  it('updates toggle button appearance when clicked', () => {\n    renderNotifications()\n    \n    const toggleButtons = screen.getAllByRole('button')\n    const firstToggle = toggleButtons[0]\n\n    // Check initial state\n    expect(firstToggle.firstElementChild).toHaveClass('translate-x-6') // Enabled position\n\n    // Toggle off\n    fireEvent.click(firstToggle)\n    expect(firstToggle.firstElementChild).toHaveClass('translate-x-1') // Disabled position\n\n    // Toggle on again\n    fireEvent.click(firstToggle)\n    expect(firstToggle.firstElementChild).toHaveClass('translate-x-6') // Back to enabled position\n  })\n})\n"],"version":3}