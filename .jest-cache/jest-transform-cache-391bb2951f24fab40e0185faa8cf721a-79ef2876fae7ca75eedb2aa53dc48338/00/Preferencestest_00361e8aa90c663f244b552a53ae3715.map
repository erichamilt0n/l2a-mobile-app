{"file":"/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Preferences.test.tsx","mappings":"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","names":[],"sources":["/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Preferences.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { BrowserRouter } from 'react-router-dom'\nimport Preferences from './Preferences'\n\njest.mock('../components/SettingsLayout', () => {\n  return function MockSettingsLayout({ children, title, description }: any) {\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{description}</p>\n        {children}\n      </div>\n    )\n  }\n})\n\ndescribe('Preferences', () => {\n  const renderPreferences = () => {\n    render(\n      <BrowserRouter>\n        <Preferences />\n      </BrowserRouter>\n    )\n  }\n\n  it('renders preferences header', () => {\n    renderPreferences()\n    expect(screen.getByText('Preferences')).toBeInTheDocument()\n    expect(screen.getByText('Customize your application settings')).toBeInTheDocument()\n  })\n\n  it('renders all preference settings', () => {\n    renderPreferences()\n    \n    // Check for all preference titles\n    expect(screen.getByText('Dark Mode')).toBeInTheDocument()\n    expect(screen.getByText('Auto Booking')).toBeInTheDocument()\n    expect(screen.getByText('Session Reminders')).toBeInTheDocument()\n\n    // Check for all preference descriptions\n    expect(screen.getByText('Use dark theme across the application')).toBeInTheDocument()\n    expect(screen.getByText('Enable automatic booking for regular sessions')).toBeInTheDocument()\n    expect(screen.getByText('Get reminders before your scheduled sessions')).toBeInTheDocument()\n  })\n\n  it('renders toggle buttons with correct initial states', () => {\n    renderPreferences()\n    \n    const toggleButtons = screen.getAllByRole('button')\n    expect(toggleButtons).toHaveLength(3)\n\n    // Check initial states based on the component's initial state\n    expect(toggleButtons[0]).toHaveClass('bg-[#333e48]') // Dark Mode - enabled\n    expect(toggleButtons[1]).toHaveClass('bg-gray-200') // Auto Booking - disabled\n    expect(toggleButtons[2]).toHaveClass('bg-[#333e48]') // Session Reminders - enabled\n  })\n\n  it('toggles preference settings when clicked', () => {\n    renderPreferences()\n    \n    const toggleButtons = screen.getAllByRole('button')\n\n    // Toggle Dark Mode (initially enabled)\n    fireEvent.click(toggleButtons[0])\n    expect(toggleButtons[0]).toHaveClass('bg-gray-200')\n\n    // Toggle Auto Booking (initially disabled)\n    fireEvent.click(toggleButtons[1])\n    expect(toggleButtons[1]).toHaveClass('bg-[#333e48]')\n\n    // Toggle Session Reminders (initially enabled)\n    fireEvent.click(toggleButtons[2])\n    expect(toggleButtons[2]).toHaveClass('bg-gray-200')\n  })\n\n  it('updates toggle button appearance when clicked', () => {\n    renderPreferences()\n    \n    const toggleButtons = screen.getAllByRole('button')\n    const firstToggle = toggleButtons[0]\n\n    // Check initial state\n    expect(firstToggle.firstElementChild).toHaveClass('translate-x-6') // Enabled position\n\n    // Toggle off\n    fireEvent.click(firstToggle)\n    expect(firstToggle.firstElementChild).toHaveClass('translate-x-1') // Disabled position\n\n    // Toggle on again\n    fireEvent.click(firstToggle)\n    expect(firstToggle.firstElementChild).toHaveClass('translate-x-6') // Back to enabled position\n  })\n\n  it('maintains other preferences state when toggling one preference', () => {\n    renderPreferences()\n    \n    const toggleButtons = screen.getAllByRole('button')\n\n    // Initial states\n    expect(toggleButtons[0]).toHaveClass('bg-[#333e48]') // Dark Mode - enabled\n    expect(toggleButtons[1]).toHaveClass('bg-gray-200') // Auto Booking - disabled\n    expect(toggleButtons[2]).toHaveClass('bg-[#333e48]') // Session Reminders - enabled\n\n    // Toggle only Auto Booking\n    fireEvent.click(toggleButtons[1])\n\n    // Check that other preferences maintained their state\n    expect(toggleButtons[0]).toHaveClass('bg-[#333e48]') // Dark Mode should still be enabled\n    expect(toggleButtons[1]).toHaveClass('bg-[#333e48]') // Auto Booking should now be enabled\n    expect(toggleButtons[2]).toHaveClass('bg-[#333e48]') // Session Reminders should still be enabled\n  })\n})\n"],"version":3}