5c174e34c585c468b670ba58f65aada7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../components/SettingsLayout', () => {
    return function MockSettingsLayout({ children, title, description }) {
        return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h1", { children: title }), (0, jsx_runtime_1.jsx)("p", { children: description }), children] }));
    };
});
const react_1 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const Preferences_1 = __importDefault(require("./Preferences"));
describe('Preferences', () => {
    const renderPreferences = () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Preferences_1.default, {}) }));
    };
    it('renders preferences header', () => {
        renderPreferences();
        expect(react_1.screen.getByText('Preferences')).toBeInTheDocument();
        expect(react_1.screen.getByText('Customize your application settings')).toBeInTheDocument();
    });
    it('renders all preference settings', () => {
        renderPreferences();
        // Check for all preference titles
        expect(react_1.screen.getByText('Dark Mode')).toBeInTheDocument();
        expect(react_1.screen.getByText('Auto Booking')).toBeInTheDocument();
        expect(react_1.screen.getByText('Session Reminders')).toBeInTheDocument();
        // Check for all preference descriptions
        expect(react_1.screen.getByText('Use dark theme across the application')).toBeInTheDocument();
        expect(react_1.screen.getByText('Enable automatic booking for regular sessions')).toBeInTheDocument();
        expect(react_1.screen.getByText('Get reminders before your scheduled sessions')).toBeInTheDocument();
    });
    it('renders toggle buttons with correct initial states', () => {
        renderPreferences();
        const toggleButtons = react_1.screen.getAllByRole('button');
        expect(toggleButtons).toHaveLength(3);
        // Check initial states based on the component's initial state
        expect(toggleButtons[0]).toHaveClass('bg-[#333e48]'); // Dark Mode - enabled
        expect(toggleButtons[1]).toHaveClass('bg-gray-200'); // Auto Booking - disabled
        expect(toggleButtons[2]).toHaveClass('bg-[#333e48]'); // Session Reminders - enabled
    });
    it('toggles preference settings when clicked', () => {
        renderPreferences();
        const toggleButtons = react_1.screen.getAllByRole('button');
        // Toggle Dark Mode (initially enabled)
        react_1.fireEvent.click(toggleButtons[0]);
        expect(toggleButtons[0]).toHaveClass('bg-gray-200');
        // Toggle Auto Booking (initially disabled)
        react_1.fireEvent.click(toggleButtons[1]);
        expect(toggleButtons[1]).toHaveClass('bg-[#333e48]');
        // Toggle Session Reminders (initially enabled)
        react_1.fireEvent.click(toggleButtons[2]);
        expect(toggleButtons[2]).toHaveClass('bg-gray-200');
    });
    it('updates toggle button appearance when clicked', () => {
        renderPreferences();
        const toggleButtons = react_1.screen.getAllByRole('button');
        const firstToggle = toggleButtons[0];
        // Check initial state
        expect(firstToggle.firstElementChild).toHaveClass('translate-x-6'); // Enabled position
        // Toggle off
        react_1.fireEvent.click(firstToggle);
        expect(firstToggle.firstElementChild).toHaveClass('translate-x-1'); // Disabled position
        // Toggle on again
        react_1.fireEvent.click(firstToggle);
        expect(firstToggle.firstElementChild).toHaveClass('translate-x-6'); // Back to enabled position
    });
    it('maintains other preferences state when toggling one preference', () => {
        renderPreferences();
        const toggleButtons = react_1.screen.getAllByRole('button');
        // Initial states
        expect(toggleButtons[0]).toHaveClass('bg-[#333e48]'); // Dark Mode - enabled
        expect(toggleButtons[1]).toHaveClass('bg-gray-200'); // Auto Booking - disabled
        expect(toggleButtons[2]).toHaveClass('bg-[#333e48]'); // Session Reminders - enabled
        // Toggle only Auto Booking
        react_1.fireEvent.click(toggleButtons[1]);
        // Check that other preferences maintained their state
        expect(toggleButtons[0]).toHaveClass('bg-[#333e48]'); // Dark Mode should still be enabled
        expect(toggleButtons[1]).toHaveClass('bg-[#333e48]'); // Auto Booking should now be enabled
        expect(toggleButtons[2]).toHaveClass('bg-[#333e48]'); // Session Reminders should still be enabled
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,