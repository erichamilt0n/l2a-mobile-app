{"file":"/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/components/Calendar.test.tsx","mappings":"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","names":[],"sources":["/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/components/Calendar.test.tsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react'\nimport Calendar from './Calendar'\n\ndescribe('Calendar', () => {\n  const mockOnDateSelect = jest.fn()\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Mock current date to ensure consistent testing\n    jest.useFakeTimers()\n    jest.setSystemTime(new Date(2024, 0, 1)) // January 1, 2024\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  it('renders calendar with correct month and year', () => {\n    render(<Calendar onDateSelect={mockOnDateSelect} />)\n\n    expect(screen.getByText('January')).toBeInTheDocument()\n    expect(screen.getByText('2024')).toBeInTheDocument()\n  })\n\n  it('renders weekday headers', () => {\n    render(<Calendar />)\n\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n    weekdays.forEach(day => {\n      expect(screen.getByText(day)).toBeInTheDocument()\n    })\n  })\n\n  it('handles month navigation', () => {\n    render(<Calendar onDateSelect={mockOnDateSelect} />)\n\n    // Navigate to next month\n    fireEvent.click(screen.getByLabelText('next-month'))\n    expect(screen.getByText('February')).toBeInTheDocument()\n\n    // Navigate to previous month\n    fireEvent.click(screen.getByLabelText('previous-month'))\n    expect(screen.getByText('January')).toBeInTheDocument()\n  })\n\n  it('handles year navigation', () => {\n    render(<Calendar onDateSelect={mockOnDateSelect} />)\n\n    // Change year using select\n    fireEvent.change(screen.getByLabelText('select-year'), { target: { value: '2025' } })\n    expect(screen.getByText('2025')).toBeInTheDocument()\n  })\n\n  it('handles month selection', () => {\n    render(<Calendar onDateSelect={mockOnDateSelect} />)\n\n    // Change month using select\n    fireEvent.change(screen.getByLabelText('select-month'), { target: { value: '6' } })\n    expect(screen.getByText('July')).toBeInTheDocument()\n  })\n\n  it('calls onDateSelect when clicking a date', () => {\n    render(<Calendar onDateSelect={mockOnDateSelect} selectedDate={new Date(2024, 0, 1)} />)\n\n    // Click on a date in the current month\n    fireEvent.click(screen.getByText('15'))\n    expect(mockOnDateSelect).toHaveBeenCalledWith(new Date(2024, 0, 15))\n  })\n\n  it('respects minDate and maxDate constraints', () => {\n    const minDate = new Date(2024, 0, 5)\n    const maxDate = new Date(2024, 0, 25)\n\n    render(\n      <Calendar\n        onDateSelect={mockOnDateSelect}\n        selectedDate={new Date(2024, 0, 15)}\n        minDate={minDate}\n        maxDate={maxDate}\n      />\n    )\n\n    // Find all date buttons\n    const dateButtons = screen.getAllByRole('button').filter(button => {\n      const text = button.textContent\n      return (\n        text &&\n        !isNaN(parseInt(text)) &&\n        button.getAttribute('aria-label') !== 'next-month' &&\n        button.getAttribute('aria-label') !== 'previous-month'\n      )\n    })\n\n    // Find the first date button for January 3rd (should be disabled)\n    const earlyDate = dateButtons.find(\n      button => button.textContent === '3' && !button.classList.contains('text-gray-600')\n    )\n    expect(earlyDate).toBeDefined()\n    expect(earlyDate).toBeDisabled()\n\n    // Find the date button for January 27th (should be disabled)\n    const lateDate = dateButtons.find(button => button.textContent === '27')\n    expect(lateDate).toBeDefined()\n    expect(lateDate).toBeDisabled()\n\n    // Find the date button for January 15th (should be enabled)\n    const validDate = dateButtons.find(button => button.textContent === '15')\n    expect(validDate).toBeDefined()\n    expect(validDate).not.toBeDisabled()\n  })\n\n  it('handles year wrap around when navigating months', () => {\n    render(<Calendar onDateSelect={mockOnDateSelect} selectedDate={new Date(2024, 11, 1)} />)\n\n    // Navigate to next month (should wrap to January next year)\n    fireEvent.click(screen.getByLabelText('next-month'))\n    expect(screen.getByText('January')).toBeInTheDocument()\n    expect(screen.getByText('2025')).toBeInTheDocument()\n\n    // Navigate back\n    fireEvent.click(screen.getByLabelText('previous-month'))\n    expect(screen.getByText('December')).toBeInTheDocument()\n    expect(screen.getByText('2024')).toBeInTheDocument()\n  })\n})\n"],"version":3}