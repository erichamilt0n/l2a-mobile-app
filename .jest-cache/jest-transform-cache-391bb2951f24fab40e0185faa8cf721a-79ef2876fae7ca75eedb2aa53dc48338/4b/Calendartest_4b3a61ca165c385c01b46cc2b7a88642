27d88ce5940e787ae03e2fc33ed736af
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const Calendar_1 = __importDefault(require("./Calendar"));
describe('Calendar', () => {
    const mockOnDateSelect = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock current date to ensure consistent testing
        jest.useFakeTimers();
        jest.setSystemTime(new Date(2024, 0, 1)); // January 1, 2024
    });
    afterEach(() => {
        jest.useRealTimers();
    });
    it('renders calendar with correct month and year', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, { onDateSelect: mockOnDateSelect }));
        expect(react_1.screen.getByText('January')).toBeInTheDocument();
        expect(react_1.screen.getByText('2024')).toBeInTheDocument();
    });
    it('renders weekday headers', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, {}));
        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        weekdays.forEach(day => {
            expect(react_1.screen.getByText(day)).toBeInTheDocument();
        });
    });
    it('handles month navigation', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, { onDateSelect: mockOnDateSelect }));
        // Navigate to next month
        react_1.fireEvent.click(react_1.screen.getByLabelText('next-month'));
        expect(react_1.screen.getByText('February')).toBeInTheDocument();
        // Navigate to previous month
        react_1.fireEvent.click(react_1.screen.getByLabelText('previous-month'));
        expect(react_1.screen.getByText('January')).toBeInTheDocument();
    });
    it('handles year navigation', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, { onDateSelect: mockOnDateSelect }));
        // Change year using select
        react_1.fireEvent.change(react_1.screen.getByLabelText('select-year'), { target: { value: '2025' } });
        expect(react_1.screen.getByText('2025')).toBeInTheDocument();
    });
    it('handles month selection', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, { onDateSelect: mockOnDateSelect }));
        // Change month using select
        react_1.fireEvent.change(react_1.screen.getByLabelText('select-month'), { target: { value: '6' } });
        expect(react_1.screen.getByText('July')).toBeInTheDocument();
    });
    it('calls onDateSelect when clicking a date', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, { onDateSelect: mockOnDateSelect, selectedDate: new Date(2024, 0, 1) }));
        // Click on a date in the current month
        react_1.fireEvent.click(react_1.screen.getByText('15'));
        expect(mockOnDateSelect).toHaveBeenCalledWith(new Date(2024, 0, 15));
    });
    it('respects minDate and maxDate constraints', () => {
        const minDate = new Date(2024, 0, 5);
        const maxDate = new Date(2024, 0, 25);
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, { onDateSelect: mockOnDateSelect, selectedDate: new Date(2024, 0, 15), minDate: minDate, maxDate: maxDate }));
        // Find all date buttons
        const dateButtons = react_1.screen.getAllByRole('button').filter(button => {
            const text = button.textContent;
            return (text &&
                !isNaN(parseInt(text)) &&
                button.getAttribute('aria-label') !== 'next-month' &&
                button.getAttribute('aria-label') !== 'previous-month');
        });
        // Find the first date button for January 3rd (should be disabled)
        const earlyDate = dateButtons.find(button => button.textContent === '3' && !button.classList.contains('text-gray-600'));
        expect(earlyDate).toBeDefined();
        expect(earlyDate).toBeDisabled();
        // Find the date button for January 27th (should be disabled)
        const lateDate = dateButtons.find(button => button.textContent === '27');
        expect(lateDate).toBeDefined();
        expect(lateDate).toBeDisabled();
        // Find the date button for January 15th (should be enabled)
        const validDate = dateButtons.find(button => button.textContent === '15');
        expect(validDate).toBeDefined();
        expect(validDate).not.toBeDisabled();
    });
    it('handles year wrap around when navigating months', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Calendar_1.default, { onDateSelect: mockOnDateSelect, selectedDate: new Date(2024, 11, 1) }));
        // Navigate to next month (should wrap to January next year)
        react_1.fireEvent.click(react_1.screen.getByLabelText('next-month'));
        expect(react_1.screen.getByText('January')).toBeInTheDocument();
        expect(react_1.screen.getByText('2025')).toBeInTheDocument();
        // Navigate back
        react_1.fireEvent.click(react_1.screen.getByLabelText('previous-month'));
        expect(react_1.screen.getByText('December')).toBeInTheDocument();
        expect(react_1.screen.getByText('2024')).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,