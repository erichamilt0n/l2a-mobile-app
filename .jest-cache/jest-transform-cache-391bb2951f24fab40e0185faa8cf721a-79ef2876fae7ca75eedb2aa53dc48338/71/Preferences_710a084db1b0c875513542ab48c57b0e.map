{"file":"/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Preferences.tsx","mappings":";;;;;;AAAA,iCAAuC;AACvC,kFAAyD;AASzD,SAAwB,WAAW;IACjC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,IAAA,gBAAQ,EAAsB;QAClE;YACE,EAAE,EAAE,UAAU;YACd,KAAK,EAAE,WAAW;YAClB,WAAW,EAAE,uCAAuC;YACpD,OAAO,EAAE,IAAI;SACd;QACD;YACE,EAAE,EAAE,UAAU;YACd,KAAK,EAAE,cAAc;YACrB,WAAW,EAAE,+CAA+C;YAC5D,OAAO,EAAE,KAAK;SACf;QACD;YACE,EAAE,EAAE,WAAW;YACf,KAAK,EAAE,mBAAmB;YAC1B,WAAW,EAAE,8CAA8C;YAC3D,OAAO,EAAE,IAAI;SACd;KACF,CAAC,CAAA;IAEF,MAAM,gBAAgB,GAAG,CAAC,EAAU,EAAE,EAAE;QACtC,cAAc,CACZ,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAC3B,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,UAAU,EAAE,OAAO,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,UAAU,CACpF,CACF,CAAA;IACH,CAAC,CAAA;IAED,OAAO,CACL,uBAAC,wBAAc,IAAC,KAAK,EAAC,aAAa,EAAC,WAAW,EAAC,qCAAqC,YACnF,gCAAK,SAAS,EAAC,yBAAyB,YACtC,gCAAK,SAAS,EAAC,WAAW,YACvB,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,CAC7B,iCAAyB,SAAS,EAAC,wCAAwC,aACzE,4CACE,+BAAI,SAAS,EAAC,2BAA2B,YAAE,UAAU,CAAC,KAAK,GAAM,EACjE,8BAAG,SAAS,EAAC,uBAAuB,YAAE,UAAU,CAAC,WAAW,GAAK,IAC7D,EACN,mCACE,OAAO,EAAE,GAAG,EAAE;gCACZ,gBAAgB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;4BACjC,CAAC,EACD,SAAS,EAAE,6EACT,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,aACxC,EAAE,YAEF,iCACE,SAAS,EAAE,6EACT,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,eACzC,EAAE,GACF,GACK,KAlBD,UAAU,CAAC,EAAE,CAmBjB,CACP,CAAC,GACE,GACF,GACS,CAClB,CAAA;AACH,CAAC;AA5DD,8BA4DC","names":[],"sources":["/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Preferences.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport SettingsLayout from '../components/SettingsLayout'\n\ninterface PreferenceSetting {\n  id: string\n  title: string\n  description: string\n  enabled: boolean\n}\n\nexport default function Preferences() {\n  const [preferences, setPreferences] = useState<PreferenceSetting[]>([\n    {\n      id: 'darkMode',\n      title: 'Dark Mode',\n      description: 'Use dark theme across the application',\n      enabled: true,\n    },\n    {\n      id: 'autoBook',\n      title: 'Auto Booking',\n      description: 'Enable automatic booking for regular sessions',\n      enabled: false,\n    },\n    {\n      id: 'reminders',\n      title: 'Session Reminders',\n      description: 'Get reminders before your scheduled sessions',\n      enabled: true,\n    },\n  ])\n\n  const togglePreference = (id: string) => {\n    setPreferences(\n      preferences.map(preference =>\n        preference.id === id ? { ...preference, enabled: !preference.enabled } : preference\n      )\n    )\n  }\n\n  return (\n    <SettingsLayout title=\"Preferences\" description=\"Customize your application settings\">\n      <div className=\"bg-white rounded-xl p-8\">\n        <div className=\"space-y-6\">\n          {preferences.map(preference => (\n            <div key={preference.id} className=\"flex items-center justify-between py-4\">\n              <div>\n                <h3 className=\"text-gray-900 font-medium\">{preference.title}</h3>\n                <p className=\"text-gray-500 text-sm\">{preference.description}</p>\n              </div>\n              <button\n                onClick={() => {\n                  togglePreference(preference.id)\n                }}\n                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                  preference.enabled ? 'bg-[#333e48]' : 'bg-gray-200'\n                }`}\n              >\n                <span\n                  className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                    preference.enabled ? 'translate-x-6' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </SettingsLayout>\n  )\n}\n"],"version":3}