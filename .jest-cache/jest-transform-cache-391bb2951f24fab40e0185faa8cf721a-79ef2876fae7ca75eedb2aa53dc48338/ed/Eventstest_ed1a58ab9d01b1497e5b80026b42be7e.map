{"file":"/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Events.test.tsx","mappings":"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","names":[],"sources":["/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Events.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen } from '@testing-library/react'\nimport Events from './Events'\n\ndescribe('Events', () => {\n  it('renders the events page title', () => {\n    render(<Events />)\n    expect(screen.getByText('Upcoming Events')).toBeInTheDocument()\n    expect(screen.getByText('Register for tournaments and training sessions')).toBeInTheDocument()\n  })\n\n  it('renders all event category buttons', () => {\n    render(<Events />)\n    const buttons = screen.getAllByRole('button')\n    expect(buttons.some(button => button.textContent === 'All Events')).toBe(true)\n    expect(buttons.some(button => button.textContent === 'Tournaments')).toBe(true)\n    expect(buttons.some(button => button.textContent === 'Training')).toBe(true)\n    expect(buttons.some(button => button.textContent === 'Social')).toBe(true)\n  })\n\n  it('renders all events with correct information', () => {\n    render(<Events />)\n\n    // Check for event titles\n    expect(screen.getByText('Winter Tournament')).toBeInTheDocument()\n    expect(screen.getByText('Pro Training Session')).toBeInTheDocument()\n    expect(screen.getByText('Christmas Social')).toBeInTheDocument()\n\n    // Check for event dates and times\n    expect(screen.getByText(/Dec 20, 2024.*2:00 PM/)).toBeInTheDocument()\n    expect(screen.getByText(/Dec 22, 2024.*10:00 AM/)).toBeInTheDocument()\n    expect(screen.getByText(/Dec 24, 2024.*1:00 PM/)).toBeInTheDocument()\n\n    // Check for spots left\n    expect(screen.getByText('8 spots left')).toBeInTheDocument()\n    expect(screen.getByText('4 spots left')).toBeInTheDocument()\n    expect(screen.getByText('12 spots left')).toBeInTheDocument()\n  })\n\n  it('renders correct button text based on event status', () => {\n    render(<Events />)\n\n    const registerButtons = screen.getAllByText('Register Now')\n    expect(registerButtons).toHaveLength(2) // Two events are 'open'\n\n    const waitlistButtons = screen.getAllByText('Waitlist')\n    expect(waitlistButtons).toHaveLength(1) // One event is 'waitlist'\n  })\n\n  it('renders the calendar view button', () => {\n    render(<Events />)\n    const calendarButton = screen.getByText('View Calendar')\n    expect(calendarButton).toBeInTheDocument()\n  })\n\n  it('applies correct styling for different event types', () => {\n    render(<Events />)\n\n    // Find all event type badges (spans) that contain the type text\n    const eventTypes = screen\n      .getAllByText(/Tournament|Training|Social/)\n      .filter(element => element.tagName.toLowerCase() === 'span')\n\n    const tournamentType = eventTypes.find(type => type.textContent === 'Tournament')\n    const socialType = eventTypes.find(type => type.textContent === 'Social')\n    const trainingType = eventTypes.find(type => type.textContent === 'Training')\n\n    expect(tournamentType).toHaveClass('bg-blue-100', 'text-blue-800')\n    expect(socialType).toHaveClass('bg-red-100', 'text-red-800')\n    expect(trainingType).toHaveClass('bg-purple-100', 'text-purple-800')\n  })\n})\n"],"version":3}