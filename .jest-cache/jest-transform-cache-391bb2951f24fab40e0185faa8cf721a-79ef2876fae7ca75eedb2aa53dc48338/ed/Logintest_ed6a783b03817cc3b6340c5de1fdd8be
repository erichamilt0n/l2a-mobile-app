38675f135ae624e414d4595c06ed81b6
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));
const react_1 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const Login_1 = __importDefault(require("./Login"));
// Mock useNavigate
const mockNavigate = jest.fn();
describe('Login', () => {
    beforeEach(() => {
        mockNavigate.mockClear();
    });
    it('renders login form with all elements', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Login_1.default, {}) }));
        // Check for main elements
        expect(react_1.screen.getByText('Welcome Back')).toBeInTheDocument();
        expect(react_1.screen.getByLabelText('Email')).toBeInTheDocument();
        expect(react_1.screen.getByLabelText('Password')).toBeInTheDocument();
        expect(react_1.screen.getByText('Sign In')).toBeInTheDocument();
        expect(react_1.screen.getByText('Forgot Password?')).toBeInTheDocument();
    });
    it('handles successful login', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Login_1.default, {}) }));
        // Fill in correct credentials
        react_1.fireEvent.change(react_1.screen.getByLabelText('Email'), {
            target: { value: 'member@email.com' },
        });
        react_1.fireEvent.change(react_1.screen.getByLabelText('Password'), {
            target: { value: 'password' },
        });
        // Submit form
        react_1.fireEvent.submit(react_1.screen.getByRole('button', { name: 'Sign In' }));
        // Check navigation
        expect(mockNavigate).toHaveBeenCalledWith('/dashboard');
        expect(react_1.screen.queryByText('Invalid email or password')).not.toBeInTheDocument();
    });
    it('handles failed login', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Login_1.default, {}) }));
        // Fill in incorrect credentials
        react_1.fireEvent.change(react_1.screen.getByLabelText('Email'), {
            target: { value: 'wrong@email.com' },
        });
        react_1.fireEvent.change(react_1.screen.getByLabelText('Password'), {
            target: { value: 'wrongpassword' },
        });
        // Submit form
        react_1.fireEvent.submit(react_1.screen.getByRole('button', { name: 'Sign In' }));
        // Check error message
        expect(react_1.screen.getByText('Invalid email or password')).toBeInTheDocument();
        expect(mockNavigate).not.toHaveBeenCalled();
    });
    it('requires email and password fields', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Login_1.default, {}) }));
        // Try to submit without filling in fields
        const submitButton = react_1.screen.getByRole('button', { name: 'Sign In' });
        react_1.fireEvent.click(submitButton);
        // Form shouldn't submit due to HTML5 validation
        expect(mockNavigate).not.toHaveBeenCalled();
    });
    it('updates input values on change', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Login_1.default, {}) }));
        const emailInput = react_1.screen.getByLabelText('Email');
        const passwordInput = react_1.screen.getByLabelText('Password');
        // Type in email
        react_1.fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
        expect(emailInput).toHaveValue('test@example.com');
        // Type in password
        react_1.fireEvent.change(passwordInput, { target: { value: 'testpassword' } });
        expect(passwordInput).toHaveValue('testpassword');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,