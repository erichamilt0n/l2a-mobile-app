{"file":"/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Login.test.tsx","mappings":";;;;;;AAOA,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,CAAC;IACnC,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC;IACzC,WAAW,EAAE,GAAG,EAAE,CAAC,YAAY;CAChC,CAAC,CAAC,CAAA;AATH,kDAAkE;AAClE,uDAAgD;AAChD,oDAA2B;AAE3B,mBAAmB;AACnB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;AAM9B,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,UAAU,CAAC,GAAG,EAAE;QACd,YAAY,CAAC,SAAS,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,IAAA,cAAM,EACJ,uBAAC,gCAAa,cACZ,uBAAC,eAAK,KAAG,GACK,CACjB,CAAA;QAED,0BAA0B;QAC1B,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAA;QAC5D,MAAM,CAAC,cAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAA;QAC1D,MAAM,CAAC,cAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAA;QAC7D,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAA;QACvD,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAA;IAClE,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,IAAA,cAAM,EACJ,uBAAC,gCAAa,cACZ,uBAAC,eAAK,KAAG,GACK,CACjB,CAAA;QAED,8BAA8B;QAC9B,iBAAS,CAAC,MAAM,CAAC,cAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YAC/C,MAAM,EAAE,EAAE,KAAK,EAAE,kBAAkB,EAAE;SACtC,CAAC,CAAA;QACF,iBAAS,CAAC,MAAM,CAAC,cAAM,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;YAClD,MAAM,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE;SAC9B,CAAC,CAAA;QAEF,cAAc;QACd,iBAAS,CAAC,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;QAEjE,mBAAmB;QACnB,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAA;QACvD,MAAM,CAAC,cAAM,CAAC,WAAW,CAAC,2BAA2B,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAA;IACjF,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,IAAA,cAAM,EACJ,uBAAC,gCAAa,cACZ,uBAAC,eAAK,KAAG,GACK,CACjB,CAAA;QAED,gCAAgC;QAChC,iBAAS,CAAC,MAAM,CAAC,cAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YAC/C,MAAM,EAAE,EAAE,KAAK,EAAE,iBAAiB,EAAE;SACrC,CAAC,CAAA;QACF,iBAAS,CAAC,MAAM,CAAC,cAAM,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;YAClD,MAAM,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE;SACnC,CAAC,CAAA;QAEF,cAAc;QACd,iBAAS,CAAC,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,CAAA;QAEjE,sBAAsB;QACtB,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAA;QACzE,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;IAC7C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,IAAA,cAAM,EACJ,uBAAC,gCAAa,cACZ,uBAAC,eAAK,KAAG,GACK,CACjB,CAAA;QAED,0CAA0C;QAC1C,MAAM,YAAY,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA;QACpE,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;QAE7B,gDAAgD;QAChD,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;IAC7C,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,IAAA,cAAM,EACJ,uBAAC,gCAAa,cACZ,uBAAC,eAAK,KAAG,GACK,CACjB,CAAA;QAED,MAAM,UAAU,GAAG,cAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA;QACjD,MAAM,aAAa,GAAG,cAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;QAEvD,gBAAgB;QAChB,iBAAS,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAA;QACvE,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAA;QAElD,mBAAmB;QACnB,iBAAS,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE,CAAC,CAAA;QACtE,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA;IACnD,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/Users/erichamilt0n/repos/lodge2a/l2a-mobile-app/src/pages/Login.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent } from '@testing-library/react'\nimport { BrowserRouter } from 'react-router-dom'\nimport Login from './Login'\n\n// Mock useNavigate\nconst mockNavigate = jest.fn()\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: () => mockNavigate,\n}))\n\ndescribe('Login', () => {\n  beforeEach(() => {\n    mockNavigate.mockClear()\n  })\n\n  it('renders login form with all elements', () => {\n    render(\n      <BrowserRouter>\n        <Login />\n      </BrowserRouter>\n    )\n\n    // Check for main elements\n    expect(screen.getByText('Welcome Back')).toBeInTheDocument()\n    expect(screen.getByLabelText('Email')).toBeInTheDocument()\n    expect(screen.getByLabelText('Password')).toBeInTheDocument()\n    expect(screen.getByText('Sign In')).toBeInTheDocument()\n    expect(screen.getByText('Forgot Password?')).toBeInTheDocument()\n  })\n\n  it('handles successful login', () => {\n    render(\n      <BrowserRouter>\n        <Login />\n      </BrowserRouter>\n    )\n\n    // Fill in correct credentials\n    fireEvent.change(screen.getByLabelText('Email'), {\n      target: { value: 'member@email.com' },\n    })\n    fireEvent.change(screen.getByLabelText('Password'), {\n      target: { value: 'password' },\n    })\n\n    // Submit form\n    fireEvent.submit(screen.getByRole('button', { name: 'Sign In' }))\n\n    // Check navigation\n    expect(mockNavigate).toHaveBeenCalledWith('/dashboard')\n    expect(screen.queryByText('Invalid email or password')).not.toBeInTheDocument()\n  })\n\n  it('handles failed login', () => {\n    render(\n      <BrowserRouter>\n        <Login />\n      </BrowserRouter>\n    )\n\n    // Fill in incorrect credentials\n    fireEvent.change(screen.getByLabelText('Email'), {\n      target: { value: 'wrong@email.com' },\n    })\n    fireEvent.change(screen.getByLabelText('Password'), {\n      target: { value: 'wrongpassword' },\n    })\n\n    // Submit form\n    fireEvent.submit(screen.getByRole('button', { name: 'Sign In' }))\n\n    // Check error message\n    expect(screen.getByText('Invalid email or password')).toBeInTheDocument()\n    expect(mockNavigate).not.toHaveBeenCalled()\n  })\n\n  it('requires email and password fields', () => {\n    render(\n      <BrowserRouter>\n        <Login />\n      </BrowserRouter>\n    )\n\n    // Try to submit without filling in fields\n    const submitButton = screen.getByRole('button', { name: 'Sign In' })\n    fireEvent.click(submitButton)\n\n    // Form shouldn't submit due to HTML5 validation\n    expect(mockNavigate).not.toHaveBeenCalled()\n  })\n\n  it('updates input values on change', () => {\n    render(\n      <BrowserRouter>\n        <Login />\n      </BrowserRouter>\n    )\n\n    const emailInput = screen.getByLabelText('Email')\n    const passwordInput = screen.getByLabelText('Password')\n\n    // Type in email\n    fireEvent.change(emailInput, { target: { value: 'test@example.com' } })\n    expect(emailInput).toHaveValue('test@example.com')\n\n    // Type in password\n    fireEvent.change(passwordInput, { target: { value: 'testpassword' } })\n    expect(passwordInput).toHaveValue('testpassword')\n  })\n})\n"],"version":3}