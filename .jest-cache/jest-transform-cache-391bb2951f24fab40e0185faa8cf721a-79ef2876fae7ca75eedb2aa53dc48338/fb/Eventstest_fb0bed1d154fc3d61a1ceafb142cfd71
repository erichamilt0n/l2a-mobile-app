9af204ae766b20d8b3c5edac8404d1e7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const Events_1 = __importDefault(require("./Events"));
describe('Events', () => {
    it('renders the events page title', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Events_1.default, {}));
        expect(react_1.screen.getByText('Upcoming Events')).toBeInTheDocument();
        expect(react_1.screen.getByText('Register for tournaments and training sessions')).toBeInTheDocument();
    });
    it('renders all event category buttons', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Events_1.default, {}));
        const buttons = react_1.screen.getAllByRole('button');
        expect(buttons.some(button => button.textContent === 'All Events')).toBe(true);
        expect(buttons.some(button => button.textContent === 'Tournaments')).toBe(true);
        expect(buttons.some(button => button.textContent === 'Training')).toBe(true);
        expect(buttons.some(button => button.textContent === 'Social')).toBe(true);
    });
    it('renders all events with correct information', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Events_1.default, {}));
        // Check for event titles
        expect(react_1.screen.getByText('Winter Tournament')).toBeInTheDocument();
        expect(react_1.screen.getByText('Pro Training Session')).toBeInTheDocument();
        expect(react_1.screen.getByText('Christmas Social')).toBeInTheDocument();
        // Check for event dates and times
        expect(react_1.screen.getByText(/Dec 20, 2024.*2:00 PM/)).toBeInTheDocument();
        expect(react_1.screen.getByText(/Dec 22, 2024.*10:00 AM/)).toBeInTheDocument();
        expect(react_1.screen.getByText(/Dec 24, 2024.*1:00 PM/)).toBeInTheDocument();
        // Check for spots left
        expect(react_1.screen.getByText('8 spots left')).toBeInTheDocument();
        expect(react_1.screen.getByText('4 spots left')).toBeInTheDocument();
        expect(react_1.screen.getByText('12 spots left')).toBeInTheDocument();
    });
    it('renders correct button text based on event status', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Events_1.default, {}));
        const registerButtons = react_1.screen.getAllByText('Register Now');
        expect(registerButtons).toHaveLength(2); // Two events are 'open'
        const waitlistButtons = react_1.screen.getAllByText('Waitlist');
        expect(waitlistButtons).toHaveLength(1); // One event is 'waitlist'
    });
    it('renders the calendar view button', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Events_1.default, {}));
        const calendarButton = react_1.screen.getByText('View Calendar');
        expect(calendarButton).toBeInTheDocument();
    });
    it('applies correct styling for different event types', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Events_1.default, {}));
        // Find all event type badges (spans) that contain the type text
        const eventTypes = react_1.screen
            .getAllByText(/Tournament|Training|Social/)
            .filter(element => element.tagName.toLowerCase() === 'span');
        const tournamentType = eventTypes.find(type => type.textContent === 'Tournament');
        const socialType = eventTypes.find(type => type.textContent === 'Social');
        const trainingType = eventTypes.find(type => type.textContent === 'Training');
        expect(tournamentType).toHaveClass('bg-blue-100 text-blue-800');
        expect(socialType).toHaveClass('bg-red-100 text-red-800');
        expect(trainingType).toHaveClass('bg-purple-100 text-purple-800');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,