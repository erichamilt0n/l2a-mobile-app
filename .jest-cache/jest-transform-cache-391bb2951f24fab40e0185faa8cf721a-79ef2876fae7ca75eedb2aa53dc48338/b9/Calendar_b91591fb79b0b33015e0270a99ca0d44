b30643e539db506bbecebacb2a53304c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
function Calendar({ onDateSelect, selectedDate = new Date(), minDate, maxDate, }) {
    const [currentMonth, setCurrentMonth] = (0, react_1.useState)(selectedDate.getMonth());
    const [currentYear, setCurrentYear] = (0, react_1.useState)(selectedDate.getFullYear());
    const months = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
    ];
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();
    const generateCalendarDays = () => {
        const days = [];
        const previousMonthDays = new Date(currentYear, currentMonth, 0).getDate();
        // Previous month days
        for (let i = firstDayOfMonth - 1; i >= 0; i--) {
            days.push({
                day: previousMonthDays - i,
                isCurrentMonth: false,
                isPast: true,
            });
        }
        // Current month days
        const today = new Date();
        for (let i = 1; i <= daysInMonth; i++) {
            const date = new Date(currentYear, currentMonth, i);
            const isDisabled = (minDate && date < minDate) || (maxDate && date > maxDate);
            days.push({
                day: i,
                isCurrentMonth: true,
                isToday: i === today.getDate() &&
                    currentMonth === today.getMonth() &&
                    currentYear === today.getFullYear(),
                isSelected: i === selectedDate.getDate() &&
                    currentMonth === selectedDate.getMonth() &&
                    currentYear === selectedDate.getFullYear(),
                isDisabled,
            });
        }
        // Next month days
        const remainingDays = 42 - days.length; // 6 rows * 7 days = 42
        for (let i = 1; i <= remainingDays; i++) {
            days.push({
                day: i,
                isCurrentMonth: false,
                isFuture: true,
            });
        }
        return days;
    };
    const handlePreviousMonth = () => {
        if (currentMonth === 0) {
            setCurrentMonth(11);
            setCurrentYear(currentYear - 1);
        }
        else {
            setCurrentMonth(currentMonth - 1);
        }
    };
    const handleNextMonth = () => {
        if (currentMonth === 11) {
            setCurrentMonth(0);
            setCurrentYear(currentYear + 1);
        }
        else {
            setCurrentMonth(currentMonth + 1);
        }
    };
    const handleDateClick = (day, isCurrentMonth) => {
        if (!isCurrentMonth)
            return;
        const selectedDate = new Date(currentYear, currentMonth, day);
        if (minDate && selectedDate < minDate)
            return;
        if (maxDate && selectedDate > maxDate)
            return;
        onDateSelect?.(selectedDate);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-dark-100 rounded-2xl p-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-6", children: [(0, jsx_runtime_1.jsx)("button", { onClick: handlePreviousMonth, className: "p-2 hover:bg-dark-200 rounded-xl text-white transition-colors", "aria-label": "previous-month", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-6 h-6", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M15 19l-7-7 7-7" }) }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)("select", { value: currentMonth, onChange: e => {
                                    setCurrentMonth(parseInt(e.target.value));
                                }, className: "bg-dark-200 text-black px-3 py-1 rounded-xl", "aria-label": "select-month", children: months.map((month, index) => ((0, jsx_runtime_1.jsx)("option", { value: index, className: "text-black", children: month }, month))) }), (0, jsx_runtime_1.jsx)("select", { value: currentYear, onChange: e => {
                                    setCurrentYear(parseInt(e.target.value));
                                }, className: "bg-dark-200 text-black px-3 py-1 rounded-xl", "aria-label": "select-year", children: Array.from({ length: 10 }, (_, i) => currentYear - 5 + i).map(year => ((0, jsx_runtime_1.jsx)("option", { value: year, className: "text-black", children: year }, year))) })] }), (0, jsx_runtime_1.jsx)("button", { onClick: handleNextMonth, className: "p-2 hover:bg-dark-200 rounded-xl text-white transition-colors", "aria-label": "next-month", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-6 h-6", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9 5l7 7-7 7" }) }) })] }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-7 gap-1 mb-2", children: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => ((0, jsx_runtime_1.jsx)("div", { className: "text-center text-gray-400 text-sm py-2", children: day }, day))) }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-7 gap-1", children: generateCalendarDays().map((day, index) => ((0, jsx_runtime_1.jsx)("button", { onClick: () => {
                        handleDateClick(day.day, day.isCurrentMonth);
                    }, disabled: day.isDisabled || !day.isCurrentMonth, className: `
              p-2 rounded-xl text-center transition-colors
              ${day.isCurrentMonth
                        ? day.isToday
                            ? 'bg-[#333e48] text-white'
                            : day.isSelected
                                ? 'bg-[#333e48] text-white'
                                : 'text-white hover:bg-dark-200'
                        : 'text-gray-600'}
              ${day.isDisabled || !day.isCurrentMonth ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
            `, children: day.day }, index))) })] }));
}
exports.default = Calendar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,