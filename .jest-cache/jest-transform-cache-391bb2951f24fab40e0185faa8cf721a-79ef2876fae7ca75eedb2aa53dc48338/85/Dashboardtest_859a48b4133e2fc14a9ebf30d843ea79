619a23f0073891f9008edc6c0b825083
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('react-router-dom', () => ({
    ...jest.requireActual('react-router-dom'),
    useNavigate: () => mockNavigate,
}));
const react_1 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const Dashboard_1 = __importDefault(require("./Dashboard"));
// Mock useNavigate
const mockNavigate = jest.fn();
describe('Dashboard', () => {
    beforeEach(() => {
        mockNavigate.mockClear();
    });
    it('renders the welcome message and description', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Dashboard_1.default, {}) }));
        expect(react_1.screen.getByText('Welcome Back, John')).toBeInTheDocument();
        expect(react_1.screen.getByText("Here's what's happening at Lodge2A")).toBeInTheDocument();
    });
    it('renders all stat cards with correct information', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Dashboard_1.default, {}) }));
        // Check stat card titles
        expect(react_1.screen.getByText('Upcoming Reservations')).toBeInTheDocument();
        expect(react_1.screen.getByText('Events This Week')).toBeInTheDocument();
        expect(react_1.screen.getByText('Average Score')).toBeInTheDocument();
        expect(react_1.screen.getByText('Pro Shop Points')).toBeInTheDocument();
        // Check stat card values
        expect(react_1.screen.getByText('3')).toBeInTheDocument();
        expect(react_1.screen.getByText('5')).toBeInTheDocument();
        expect(react_1.screen.getByText('82')).toBeInTheDocument();
        expect(react_1.screen.getByText('1,250')).toBeInTheDocument();
    });
    it('navigates to correct pages when stat cards are clicked', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Dashboard_1.default, {}) }));
        // Click each stat card and verify navigation
        react_1.fireEvent.click(react_1.screen.getByText('Upcoming Reservations'));
        expect(mockNavigate).toHaveBeenCalledWith('/reservations');
        react_1.fireEvent.click(react_1.screen.getByText('Events This Week'));
        expect(mockNavigate).toHaveBeenCalledWith('/events');
        react_1.fireEvent.click(react_1.screen.getByText('Average Score'));
        expect(mockNavigate).toHaveBeenCalledWith('/scores');
        react_1.fireEvent.click(react_1.screen.getByText('Pro Shop Points'));
        expect(mockNavigate).toHaveBeenCalledWith('/pro-shop');
    });
    it('renders recent activity section with correct information', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Dashboard_1.default, {}) }));
        // Check section title
        expect(react_1.screen.getByText('Recent Activity')).toBeInTheDocument();
        // Check activity entries
        const recentActivitySection = react_1.screen.getByText('Recent Activity').closest('div')?.parentElement;
        expect(recentActivitySection).toBeInTheDocument();
        // Check bay reservations within the recent activity section
        expect((0, react_1.within)(recentActivitySection).getAllByText(/Bay Reservation/)).toHaveLength(3);
        expect((0, react_1.within)(recentActivitySection).getAllByText(/2 hours - Bay/)).toHaveLength(3);
        expect((0, react_1.within)(recentActivitySection).getByText('Dec 5, 2024')).toBeInTheDocument();
        expect((0, react_1.within)(recentActivitySection).getByText('Dec 10, 2024')).toBeInTheDocument();
        expect((0, react_1.within)(recentActivitySection).getByText('Dec 15, 2024')).toBeInTheDocument();
    });
    it('renders upcoming events section with correct information', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Dashboard_1.default, {}) }));
        // Check section title
        expect(react_1.screen.getByText('Upcoming Events')).toBeInTheDocument();
        // Check event entries
        const upcomingEventsSection = react_1.screen.getByText('Upcoming Events').closest('div')?.parentElement;
        expect(upcomingEventsSection).toBeInTheDocument();
        // Check tournament entries within the upcoming events section
        (0, react_1.within)(upcomingEventsSection).getAllByText(/Tournament/).forEach((element, index) => {
            expect(element).toHaveTextContent(`Tournament ${index + 1}`);
        });
        expect((0, react_1.within)(upcomingEventsSection).getAllByText('18 holes - Singles')).toHaveLength(3);
        expect((0, react_1.within)(upcomingEventsSection).getByText('Dec 10, 2024')).toBeInTheDocument();
        expect((0, react_1.within)(upcomingEventsSection).getByText('Dec 20, 2024')).toBeInTheDocument();
        expect((0, react_1.within)(upcomingEventsSection).getByText('Dec 30, 2024')).toBeInTheDocument();
    });
    it('navigates to events page when View All button is clicked', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(Dashboard_1.default, {}) }));
        const viewAllButtons = react_1.screen.getAllByText('View All');
        expect(viewAllButtons).toHaveLength(2);
        // Click the View All button in the Upcoming Events section
        react_1.fireEvent.click(viewAllButtons[1]);
        expect(mockNavigate).toHaveBeenCalledWith('/events');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,