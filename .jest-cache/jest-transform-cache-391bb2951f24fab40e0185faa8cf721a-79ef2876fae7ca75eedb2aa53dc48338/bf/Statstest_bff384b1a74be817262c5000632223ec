e6c545767914b8fefd4caeff67240e4f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const Stats_1 = __importDefault(require("./Stats"));
describe('Stats', () => {
    const renderStats = () => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(Stats_1.default, {}));
    };
    it('renders the stats overview section', () => {
        renderStats();
        expect(react_1.screen.getByText('Your Stats')).toBeInTheDocument();
        expect(react_1.screen.getByText('Track your performance and progress')).toBeInTheDocument();
    });
    it('displays all stat cards with correct values', () => {
        renderStats();
        expect(react_1.screen.getByText('Titles Played')).toBeInTheDocument();
        expect(react_1.screen.getByText('24')).toBeInTheDocument();
        expect(react_1.screen.getByText('Average Score')).toBeInTheDocument();
        expect(react_1.screen.getByText('714')).toBeInTheDocument();
        expect(react_1.screen.getByText('Best Score')).toBeInTheDocument();
        expect(react_1.screen.getByText('1,075')).toBeInTheDocument();
        expect(react_1.screen.getByText('Hours Played')).toBeInTheDocument();
        expect(react_1.screen.getByText('7')).toBeInTheDocument();
    });
    it('displays recent scores section', () => {
        renderStats();
        expect(react_1.screen.getByText('Recent Scores')).toBeInTheDocument();
        const courseElements = react_1.screen.getAllByText('Lodge2A Main Course');
        expect(courseElements.length).toBeGreaterThan(0);
        expect(react_1.screen.getByText('Dec 15, 2024')).toBeInTheDocument();
        expect(react_1.screen.getByText('82')).toBeInTheDocument();
    });
    it('displays score distribution chart', () => {
        renderStats();
        expect(react_1.screen.getByText('Score Distribution')).toBeInTheDocument();
        const chartElement = react_1.screen.getByTestId('score-distribution-chart');
        expect(chartElement).toBeInTheDocument();
    });
    it('displays achievements section', () => {
        renderStats();
        expect(react_1.screen.getByText('Achievements')).toBeInTheDocument();
        const viewAllButton = react_1.screen.getAllByText('View All').find(el => el.closest('button')?.className.includes('text-blue-500'));
        expect(viewAllButton).toBeInTheDocument();
    });
    it('handles time period filter changes', () => {
        renderStats();
        const filterButton = react_1.screen.getByRole('button', { name: /Last 30 Days/i });
        expect(filterButton).toBeInTheDocument();
        react_1.fireEvent.click(filterButton);
        // Check if dropdown opens
        expect(react_1.screen.getByText('Last 7 Days')).toBeInTheDocument();
        expect(react_1.screen.getByText('Last 90 Days')).toBeInTheDocument();
        expect(react_1.screen.getByText('All Time')).toBeInTheDocument();
    });
    it('displays correct chart data based on selected time period', () => {
        renderStats();
        const filterButton = react_1.screen.getByRole('button', { name: /Last 30 Days/i });
        react_1.fireEvent.click(filterButton);
        const sevenDaysOption = react_1.screen.getByText('Last 7 Days');
        react_1.fireEvent.click(sevenDaysOption);
        // Verify chart updates
        const chartElement = react_1.screen.getByTestId('score-distribution-chart');
        expect(chartElement).toHaveAttribute('data-period', '7');
    });
    it('handles achievement card interactions', () => {
        renderStats();
        const achievementCards = react_1.screen.getAllByTestId('achievement-card');
        expect(achievementCards.length).toBeGreaterThan(0);
        react_1.fireEvent.click(achievementCards[0]);
        // Verify achievement details modal/popup
        expect(react_1.screen.getByTestId('achievement-details')).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,