name: SonarQube to Linear Integration

on:
  # Trigger when SonarQube analysis completes
  workflow_run:
    workflows: ["Linear & SonarQube Integration"]
    types:
      - completed

jobs:
  create-linear-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch SonarQube Issues
        id: sonar-issues
        run: |
          SONAR_ISSUES=$(curl -X GET \
            "https://sonarcloud.io/api/issues/search?componentKeys=${{ secrets.SONAR_PROJECT_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}")
          echo "::set-output name=issues::$SONAR_ISSUES"

      - name: Map SonarQube Severity to Linear Priority
              id: priority-mapping
              run: |
                case "$SEVERITY" in
                  "BLOCKER") echo "::set-output name=priority::1";;
                  "CRITICAL") echo "::set-output name=priority::2";;
                  "MAJOR") echo "::set-output name=priority::3";;
                  "MINOR") echo "::set-output name=priority::4";;
                  *) echo "::set-output name=priority::4";;
                esac
                
      - name: Create Linear Issues
        run: |
          for issue in $(echo "${{ steps.sonar-issues.outputs.issues }}" | jq -c '.issues[]'); do
            TITLE=$(echo $issue | jq -r '.message')
            SEVERITY=$(echo $issue | jq -r '.severity')
            FILE=$(echo $issue | jq -r '.component')
            LINE=$(echo $issue | jq -r '.line')
            
            # Create Linear issue via GraphQL API
            curl -X POST 'https://api.linear.app/graphql' \
            -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
            -H 'Content-Type: application/json' \
            --data-raw "{
              \"query\": \"mutation {
                issueCreate(
                  input: {
                    title: \\\"[SonarQube] $TITLE\\\",
                    description: \\\"**Severity:** $SEVERITY\\nFile: $FILE\\nLine: $LINE\\\",
                    teamId: \\\"${{ secrets.LINEAR_TEAM_ID }}\\\",
                    labelIds: [\\\"sonarqube\\\"]
                  }
                ) {
                  success
                  issue {
                    id
                  }
                }
              }\"
            }"
          done