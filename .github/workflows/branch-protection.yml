name: Branch Protection Rules

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  enforce-branch-protection:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check branch name format
        if: github.event_name == 'pull_request'
        env:
          HEAD_REF: ${{ github.head_ref }}
        shell: bash
        run: |
          if [[ ! "$HEAD_REF" =~ ^(feature|fix|refactor|docs|chore)/.+ ]]; then
            echo "Branch name must start with feature/, fix/, refactor/, docs/, or chore/"
            exit 1
          fi

      - name: Verify commit messages
        if: github.event_name == 'pull_request'
        env:
          BASE_REF: ${{ github.base_ref }}
        shell: bash
        run: |
          git fetch origin "$BASE_REF"
          commits=$(git log --format=%s "origin/$BASE_REF"..HEAD)
          echo "$commits" | while IFS= read -r commit; do
            # Skip merge commits
            if [[ "$commit" =~ ^Merge ]]; then
              continue
            fi
            if [[ ! "$commit" =~ ^(feat|fix|docs|style|refactor|test|chore|ci)(\(.+\))?!?:.+ ]]; then
              echo "Invalid commit message format: $commit"
              echo "Commit messages must follow conventional commits format"
              exit 1
            fi
          done

      - name: Check file size
        if: github.event_name == 'pull_request'
        env:
          BASE_REF: ${{ github.base_ref }}
        shell: bash
        run: |
          MAX_SIZE=5242880  # 5MB
          git fetch origin "$BASE_REF"
          git diff --name-only "origin/$BASE_REF"..HEAD | while read -r file; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" || stat -c%s "$file")
              if [ "$size" -gt $MAX_SIZE ]; then
                echo "File $file is larger than 5MB"
                exit 1
              fi
            fi
          done

      - name: Check owner status and auto-approve
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          PR_USER: ${{ github.event.pull_request.user.login }}
        with:
          script: |
            const isOwner = process.env.PR_USER === process.env.REPO_OWNER;
            
            if (isOwner) {
              console.log('Repository owner detected - auto-approving PR');
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'APPROVE',
                body: 'Auto-approved for repository owner'
              });
            } else {
              console.log('Not repository owner - checking for reviews');
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              
              const approvedReviews = reviews.filter(review => review.state === 'APPROVED');
              if (approvedReviews.length < 1) {
                core.setFailed('At least one approved review is required');
              }
            }
